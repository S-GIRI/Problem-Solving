
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> s;  // stack to store indices
        int maxArea = 0;

        for (int i = 0; i < n; ++i) {
            // If the current height is smaller than the height at the index in stack
            while (!s.empty() && heights[i] < heights[s.top()]) {
                int height = heights[s.top()];
                s.pop();
                int width = s.empty() ? i : i - s.top() - 1;  // calculate width
                maxArea = max(maxArea, height * width);  // update the maximum area
            }
            s.push(i);  // push the current index onto the stack
        }

        // Process remaining elements in the stack
        while (!s.empty()) {
            int height = heights[s.top()];
            s.pop();
            int width = s.empty() ? n : n - s.top() - 1;
            maxArea = max(maxArea, height * width);
        }

        return maxArea;
    }
};